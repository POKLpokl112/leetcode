In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:

Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:

Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]

 

Constraints:

    n == edges.length
    3 <= n <= 1000
    edges[i].length == 2
    1 <= ai < bi <= edges.length
    ai != bi
    There are no repeated edges.
    The given graph is connected.



class Solution {
        public int[] findRedundantConnection(int[][] edges) {
            int[] ii = new int[2001];
            for(int i = 0;i<2001;i++){
                ii[i]=-1;
            }
            for(int[] e : edges){
                int q = f(e[0],ii);
                int p = f(e[1],ii);
                if(p==q){
                    return e;
                }
                ii[q]=p;
            }
            return null;

        }

        int f(int a,int[] c){
            while(c[a]!=-1){
                
                a=c[a];
            }
            return a;
        }

    class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer,Set<Integer>> map = new HashMap<>();
        for(int[] edge : edges) {
            
            if(q(edge[0],edge[1],map,-1)){
                return edge;
            }
            Set<Integer> list = map.get(edge[1]);
            if(list==null){
                list = new HashSet<>();
                map.put(edge[1],list);    
            }
            list.add(edge[0]);
            
            list = map.get(edge[0]);
            if(list==null){
                list = new HashSet<>();
                map.put(edge[0],list);    
            }
            list.add(edge[1]);
            

        }
        return null;
    }

    private boolean q(int a,int b,Map<Integer,Set<Integer>> map,int pre){
        if(!map.containsKey(a)){
            return false;
        }
        

        for(int c : map.get(a)){
            if(c==b)return true;
            if(c==pre){
               continue;
            }
            if(q(c,b,map,a))return true;
        }
        return false;
    }
}
}
